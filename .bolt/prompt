For all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.

By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.

Use icons from lucide-react for logos.

Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.
We are working on building a medical application that integrates with SharePoint, OpenAI, and Power Automate. Here's a summary of our progress:

**Key Files:**

- **Forms/FormsReportsTemplates.tsx:** Displays report templates fetched from SharePoint and triggers report generation.
- **Forms/Template.tsx:** Displays individual template details and handles user interaction for generating reports.
- **Reports/ReportGenerator.tsx:** Handles the core report generation logic, including OpenAI integration and Power Automate triggers.
- **Reports/ReportAnalytics.tsx:** Will handle report analysis and visualization.

**Current Status:**

- FormsReportsTemplates.tsx and Template.tsx are mostly complete.
- ReportGenerator.tsx is partially implemented with OpenAI integration; Power Automate integration is pending.
- ReportAnalytics.tsx has an initial structure but needs data fetching, processing, and visualization logic.

**Dependencies:**

- FormsReportsTemplates.tsx depends on Template.tsx.
- Template.tsx depends on ReportGenerator.tsx.
- ReportGenerator.tsx depends on OpenAI and Power Automate.
- ReportAnalytics.tsx depends on data visualization libraries and potentially ReportGenerator.tsx.

**SharePoint and Power Automate:**

- We plan to define the SharePoint structure and Power Automate flows after completing the app's core functionality.
- The app will drive the structure for SharePoint and OpenAI, respecting any non-negotiable elements within those platforms.

**TypeScript Errors:**

- We resolved TypeScript errors in tsconfig.json and tsconfig.node.json related to composite builds, allowImportingTsExtensions, and noEmit settings.

**Next Steps:**

- Integrate Power Automate into ReportGenerator.tsx for document conversion and report generation.
- Trigger report generation from Template.tsx.
- Implement data fetching, processing, and visualization in ReportAnalytics.tsx.
- Define SharePoint structure and Power Automate flows after completing the app's core functionality.

